import cv2
import pyttsx3
import threading

# Initialize text-to-speech engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)  # Speech rate
engine.setProperty('volume', 1.0)  # Max volume

# Function to speak alert
def speak_alert():
    engine.say("Alert! You seem drowsy. Please stay alert while driving.")
    engine.runAndWait()

# Load Haar cascade for eye detection
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

# Constants
FRAME_LIMIT = 20
frame_counter = 0
alert_triggered = False

# Start video capture
cap = cv2.VideoCapture(0)  # Use 0 for default camera

while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    eyes = eye_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    if len(eyes) == 0:
        frame_counter += 1
        if frame_counter >= FRAME_LIMIT and not alert_triggered:
            cv2.putText(frame, "DROWSINESS ALERT!", (50, 100),
                        cv2.FONT_HERSHEY_SIMPLEX, 1.2, (0, 0, 255), 3)
            # Start speaking in a new thread
            threading.Thread(target=speak_alert).start()
            alert_triggered = True
    else:
        frame_counter = 0
        alert_triggered = False
        # Draw rectangles around detected eyes
        for (x, y, w, h) in eyes:
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

    cv2.imshow('Drowsiness Detection', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
cap.release()
cv2.destroyAllWindows()
